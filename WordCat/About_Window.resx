<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABGdBTUEAALGPC/xhBQAABxZJREFUeF7t
        3TGOIzcQRuEJ19FGTnx0X8jn8A32BnYREKgn1IMoqulRs10/8GXbPU0+5ftVq9VqtVqtVqvVarVarVar
        1Wq1Wq1Wq9VqtVqtVqvVarVarVar1Wq1Wq1Wq9VqtVqtVqvVarVarVar1WrH9/Pnz392djtG7d3Zpe7k
        dozau7NL3cntGLV3Z5e6k9sxau/OLnUnt2PU3p1d6k5ux6i9O7vUndyOUXt3dqk7uR3j/7sfP37884xd
        Gn39/dvW7Ewzbte47yw62aHJLnUndqYZt2vcdxad7NBkl7oTO9OM2zXuO4tOdmiyS92JnWnG7Rr3nUUn
        OzTZpe7EzjTjdo37zqKTHZrsUndiZ5pxu8Z9Z9HJDk12qTuxM824XeO+s+hkhya71J3YmWbcrvG8s6j0
        9deAXNqM0eITn5N30mj6TpJ3zrAfBcXf+OwsOml0kkPPGC0+8Tl5J42m7yR55wyLTvE3PjuLThqd5NAz
        RotPfE7eSaPpO0neOcOiU/yNz86ik0YnOfSM0eITn5N30mj6TpJ3zrDoFH/js7PopNFJDj1jtPjE5+Sd
        NJq+k+SdMyw6xd/47Cw6aXSSQ88YLT7xOXknjabvJHnnDItO8Tc+O4tOGp3k0DNGi098Tt5Jo+k7Sd45
        w6JT/I3PzqKTRic59IzR4hOfk3fSaPpOknfOsOgUf+M/Xz4U/P7nH4foj4LkUmg0++YH8k4aTd9J8s6V
        7EdB8Q2Hlw8FFnWGRic5NI1m3/xA3kmj6TtJ3rmSRaf4hsPLhwKLOkOjkxyaRrNvfiDvpNH0nSTvXMmi
        U3zD4eVDgUWdodFJDk2j2Tc/kHfSaPpOkneuZNEpvuHw8qHAos7Q6CSHptHsmx/IO2k0fSfJO1ey6BTf
        cHj5UGBRZ2h0kkPTaPbND+SdNJq+k+SdK1l0im84vHwosKgzNDrJoWk0++YH8k4aTd9J8s6VLDrFNxxe
        PhRY1BkaneTQNJp98wN5J42m7yR550oWneIbDi8fCizqDI1OcugrGc2eIYtO0ejwUnSyqDM0Osmhr2Q0
        e4YsOkWjw0vRyaLO0Ogkh76S0ewZsugUjQ4vRSeLOkOjkxz6SkazZ8iiUzQ6vBSdLOoMjU5y6CsZzZ4h
        i07R6PBSdLKoMzQ6yaGvZDR7hiw6RaPDS9HJos7Q6CSHvpLR7Bmy6BSNDi9FJ4s6Q6OTHPpKRrNnyKJT
        NBouRSWLtpJGJzl0eZ39KJpo25eik0VbSaOTHKq8zuI30bYvRSeLtpJGJzlUeZ3Fb6JtX4pOFm0ljU5y
        qPI6i99E274UnSzaShqd5FDldRa/ibZ9KTpZtJU0OsmhyussfhNt+1J0smgraXSSQ5XXWfwm2val6GTR
        VtLoJIcqr7P4TbTtS9HJon0n/VHMkEvZyWj2DFn8Jtr2pehkUb6TRp0hl7KT0ewZsvhNtO1L0cmifCeN
        OkMuZSej2TNk8Zto25eik0X5Thp1hlzKTkazZ8jiN9G2L0Uni/KdNOoMuZSdjGbPkMVvom1fik4W5Ttp
        1BlyKTsZzZ4hi99E274UnSzKd9KoM+RSdjKaPUMWv4m2fSk6WZTvpFFnyKXsZDR7hix+E237UnSyKDvR
        HwXJpZ3Jr1+/nrJnyOI30bYvRSe71J1odJJLOxOLTvYMWfwm2val6GSXuhONTnJpZ2LRyZ4hi99E274U
        nexSd6LRSS7tTCw62TNk8Zto25eik13qTjQ6yaWdiUUne4YsfhNt+1J0skvdiUYnubQzsehkz5DFb6Jt
        X4pOdqk70egkl3YmFp3sGbL4TbTtS9HJLnUnGp3k0s7EopM9Qxa/ibZ9KTrZpV6J/ihmyKWficVvom1f
        ik52aVeiUWfIpZ+JxW+ibV+KTnZpV6JRZ8iln4nFb6JtX4pOdmlXolFnyKWficVvom1fik52aVeiUWfI
        pZ+JxW+ibV+KTnZpV6JRZ8iln4nFb6JtX4pOdmlXolFnyKWficVvom1fik52aVeiUWfIpZ+JxW+ibV+K
        TnZp5U5/FCtJ1BkWv4m2fSk62aHLnUZbSaLOsPhNtO1L0ckOXe402koSdYbFb6JtX4pOduhyp9FWkqgz
        LH4TbftSdLJDlzuNtpJEnWHxm2jbl6KTHbrcabSVJOoMi99E274UnezQ5U6jrSRRZ1j8Jtr2pehkhy53
        Gm0liTrD4jfR9uWlHwXZpZR19EcB9p91UjQ6vBSd7KPLOhadLDpFo8NL0ck+uqxj0cmiUzQ6vBSd7KPL
        OhadLDpFo8NL0ck+uqxj0cmiUzQ6vBSd7KPLOhadLDpFo8NL0ck+uqxj0cmiUzQ6vBSd7KPLOhadLDpF
        o/986UdR1rGoFP/m40sfXdax6BT/5uNLH13WsegU/+bjSx9d1rHoFP/m40sfXdax6BT/5uNLH13WsegU
        /+aNfX39CyqA3n2U84J7AAAAAElFTkSuQmCC
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAGABoAwAAFgAAACgAAAAQAAAAIAAAAAEAGAAAAAAAaAMAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAAAAAAAAAAAAAAAAamhUa
        mhUamhUamhUamhUamhUamhUamhUamhUamhUamhUIxwAICAgAAAAAAAAamhUamhUamhUamhUamhUamhUa
        mhUamhUamhUIxwAIxwAIxwAJ4QAJ4QAPDw8AAAAamhUamhUamhUamhUamhUamhUamhUIxwAIxwAJ4QAJ
        4QAJ4QAJ4QAJ4QAPDw8AAAAamhUamhUamhUamhUamhUamhUIxwAJ4QAJ4QAJ4QAJ4QAJ4QDw8PAJ4QAP
        Dw8AAAAamhUamhUamhUamhUIxwAIxwAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QD///8J4QAPDw8AAAAamhUamhUa
        mhUIxwAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAPDw8AAAAAAAAamhUamhUIxwAJ4QAJ4QAJ
        4QAJ4QAJ4QAJ4QAJ4QD///8J4QAPDw8AAAAAAAAAAAAamhUamhUIxwAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ
        4QAJ4QAJ4QAPDw8AAAAAAAAAAAAICAgIxwAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAJ4QAPDw8AAAAA
        AAAAAAAAAAAAAAAICAgPDw8J4QAJ4QAJ4QAJ4QAJ4QAJ4QAPDw8PDw8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAPDw8PDw8PDw8PDw8PDw8PDw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAwAAgAEAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAEAAIABAADAAwAA4AcAAPgfAAD//wAA//8AAP//AAD//wAA
</value>
  </data>
</root>